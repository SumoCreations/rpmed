Resources:
  ImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:provider.environment.ATTACHED_IMAGES_BUCKET}
      # Set the CORS policy
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000
  GeneratedDocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:provider.environment.GENERATED_DOCUMENTS_BUCKET}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: 'Enabled'
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      # Set the CORS policy
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000

# Print out the name of the bucket that is created
Outputs:
  ImagesBucketName:
    Value:
      Ref: ImagesBucket
  GeneratedDocumentsBucketName:
    Value:
      Ref: GeneratedDocumentsBucket
    Export:
      Name: GeneratedDocumentsBucket${opt:stage, "dev"}
