service: rpmed-service-api
variablesResolutionMode: 20210326

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-domain-manager

custom:
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: 'yarn' # Packager that will be used to package your external modules
  serverless-offline:
    httpPort: 4000
    useChildProcesses: true
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      seed: true
      noStart: true
    seed:
      dev:
        sources:
          - table: ${self:service}-${opt:stage, "dev"}-resources
            sources: [./seed/resources.json]
          - table: ${self:service}-${opt:stage, "dev"}-users-lookup
            sources: [./seed/usersLookup.json]
  allowedOrigins:
    dev: 'localhost'
    staging: '*'
    prod: 'admin.medled.com,service.rpmed.com'
  adminEmail:
    dev: jim@sumocreations.com
    staging: jim@sumocreations.com
    prod: MedLED@rpmed.com
  domain:
    dev: dev.rpmed-apps.com
    staging: staging.rpmed-apps.com
    prod: prod.rpmed-apps.com
  clientDomain:
    dev: dev-admin.rpmed-apps.com
    staging: staging-admin.rpmed-apps.com
    prod: admin.medled.com
  apolloIntrospection:
    dev: true
    staging: false
    prod: false
  apolloVariant:
    dev: dev
    staging: staging
    prod: current
  customDomain:
    domainName: ${self:custom.domain.${opt:stage, "dev"}}
    basePath: ''
    stage: ${opt:stage, "dev"}
    createRoute53Record: true
  generatedDocumentsBucket: ${self:service}-${opt:stage, "dev"}-generated-documents
  backgroundJobTopic: '${self:service}-${opt:stage, "dev"}-sns-background-job'
  backgroundJobTopicTopicArn:
    dev:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${opt:region, self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.backgroundJobTopic}',
            ],
          ],
      }
    staging:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${opt:region, self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.backgroundJobTopic}',
            ],
          ],
      }
    prod:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${opt:region, self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.backgroundJobTopic}',
            ],
          ],
      }

provider:
  name: aws
  runtime: nodejs12.x
  profile: rpmed-serverless
  region: us-west-2
  lambdaHashingVersion: '20201221'
  environment:
    APOLLO_KEY: service:RPMed-API:jAyBkz50LpxvPcXuP_b97g
    APOLLO_GRAPH_ID: RPMed-API
    APOLLO_GRAPH_VARIANT: ${self:custom.apolloVariant.${opt:stage, 'dev'}}
    APOLLO_SCHEMA_REPORTING: true
    ADMIN_EMAIL: ${self:custom.adminEmail.${opt:stage, 'dev'}}
    ACCESS_TOKEN_LIFESPAN: 5m
    REFRESH_TOKEN_LIFESPAN: 7d
    SALT_ROUNDS: 10
    ALLOWED_ORIGINS: ${self:custom.allowedOrigins.${opt:stage, 'dev'}}
    APOLLO_INTROSPECTION: ${self:custom.apolloIntrospection.${opt:stage, 'dev'}}
    CLIENT_DOMAIN: ${self:custom.clientDomain.${opt:stage, 'dev'}}
    RECAPTCHA_KEY: 6LdOqZoUAAAAAJ79IuWa4mU57Urnd-N6oxP4XhiR
    OAUTH_SIGNATURE: 'Ph$2\@!Rq<ev_W;:N(2+>Bwxez$3?;9~srf*nxiVJLz:lw7Djgs(Q/UhwmZ@"YLi<'
    ATTACHED_IMAGES_BUCKET: ${self:service}-${opt:stage, 'dev'}-attached-images
    GENERATED_DOCUMENTS_BUCKET: ${self:custom.generatedDocumentsBucket}
    DYNAMODB_RESOURCES_TABLE: ${self:service}-${opt:stage, 'dev'}-resources
    DYNAMODB_RESOURCES_GSI_1: GSI_1
    DYNAMODB_RESOURCES_GSI_2: GSI_2
    DYNAMODB_USER_LOOKUP_TABLE: ${self:service}-${opt:stage, 'dev'}-users-lookup
    DYNAMODB_TOKEN_LOOKUP_TABLE: ${self:service}-${opt:stage, 'dev'}-tokens-lookup
    SES_SOURCE_ARN: arn:aws:ses:us-west-2:426380452104:identity/rpmed-apps.com
    PDF_RENDER_TOPIC_ARN: ${cf:rpmed-puppeteer-${opt:stage, 'dev'}.RenderTopicExport}
    SNS_EXECUTE_BACKGROUND_JOB: ${self:custom.backgroundJobTopicTopicArn.${opt:stage, 'dev'}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: ${cf:rpmed-puppeteer-${opt:stage, 'dev'}.RenderTopicExport}
    - Effect: Allow
      Action:
        - sns:DeleteEndpoint
        - sns:Publish
        - sns:GetPlatformApplicationAttributes
        - sns:CreatePlatformEndpoint
      Resource: 'arn:aws:sns:${opt:region, self:provider.region}:*'
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: 'arn:aws:ses:us-west-2:426380452104:identity/rpmed-apps.com'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: 'arn:aws:s3:::${self:provider.environment.GENERATED_DOCUMENTS_BUCKET}/*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHED_IMAGES_BUCKET}/*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${opt:stage, "dev"}-*'

functions:
  graphql:
    handler: app/apollo.graphqlHandler
    events:
      - http:
          path: graphql
          method: any
          cors: true
  token:
    handler: app/token.createToken
    events:
      - http:
          method: post
          path: auth/token
          cors: true
  forgotPassword:
    handler: app/forgot.sendResetPasswordEmail
    events:
      - http:
          method: post
          path: auth/forgot
          cors: true
  handlePdf:
    handler: app/background.handlePDF
    reservedConcurrency: 10
    timeout: 300
    events:
      - s3:
          bucket: ${self:custom.generatedDocumentsBucket}
          event: s3:ObjectCreated:*
          existing: true
  background:
    handler: app/background.handleJob
    reservedConcurrency: 10
    timeout: 300
    events:
      - sns: ${self:custom.backgroundJobTopic}
  modelsFromSheet:
    handler: app/sheets.importModels
    timeout: 60
  symptomsFromSheet:
    handler: app/sheets.importSymptoms
    timeout: 60
resources:
  # S3
  - ${file(resources/s3-bucket.yml)}
  # DynamoDB
  - ${file(resources/dynamo.yml)}
