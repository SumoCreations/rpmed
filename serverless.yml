service:
  name: rpmed-service-api

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-domain-manager

custom:
  serverless-offline:
    port: 4000
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      seed: true
      noStart: true
    seed:
      dev:
        sources:
          - table: ${self:service}-${opt:stage, self:provider.stage}-resources
            sources: [./seed/resources.json]
          - table: ${self:service}-${opt:stage, self:provider.stage}-users-lookup
            sources: [./seed/usersLookup.json]
  domain:
    dev: dev.rpmed-apps.com
    staging: staging.rpmed-apps.com
    prod: prod.rpmed-apps.com
  clientDomain:
    dev: dev-admin.rpmed-apps.com
    staging: staging-admin.rpmed-apps.com
    prod: admin.medled.com
  apolloIntrospection:
    dev: true
    staging: false
    prod: false
  customDomain:
    domainName: ${self:custom.domain.${opt:stage, self:provider.stage}}
    basePath: ''
    stage: ${opt:stage, self:provider.stage}
    createRoute53Record: true
  backgroundJobTopic: '${self:service}-${opt:stage, self:provider.stage}-sns-background-job'
  backgroundJobTopicTopicArn:
    dev:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${opt:region, self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.backgroundJobTopic}',
            ],
          ],
      }
    staging:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${opt:region, self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.backgroundJobTopic}',
            ],
          ],
      }
    prod:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${opt:region, self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.backgroundJobTopic}',
            ],
          ],
      }
  confirmRgaGoodPdfSnsTopic: confirm-rga-good-pdf-${opt:stage, self:provider.stage}
  confirmRgaGoodPdfSnsTopicArn:
    dev:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${opt:region, self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.confirmRgaGoodPdfSnsTopic}',
            ],
          ],
      }
    staging:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${opt:region, self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.confirmRgaGoodPdfSnsTopic}',
            ],
          ],
      }
    prod:
      {
        'Fn::Join':
          [
            '',
            [
              'arn:aws:sns:${opt:region, self:provider.region}:',
              { 'Ref': 'AWS::AccountId' },
              ':${self:custom.confirmRgaGoodPdfSnsTopic}',
            ],
          ],
      }

provider:
  name: aws
  runtime: nodejs12.x
  profile: rpmed-serverless
  region: us-west-2
  environment:
    ACCESS_TOKEN_LIFESPAN: 5m
    REFRESH_TOKEN_LIFESPAN: 7d
    SALT_ROUNDS: 10
    APOLLO_INTROSPECTION: ${self:custom.apolloIntrospection.${opt:stage, self:provider.stage}}
    CLIENT_DOMAIN: ${self:custom.clientDomain.${opt:stage, self:provider.stage}}
    RECAPTCHA_KEY: 6LdOqZoUAAAAAJ79IuWa4mU57Urnd-N6oxP4XhiR
    OAUTH_SIGNATURE: 'Ph$2\@!Rq<ev_W;:N(2+>Bwxez$3?;9~srf*nxiVJLz:lw7Djgs(Q/UhwmZ@"YLi<'
    ATTACHED_IMAGES_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-attached-images
    DYNAMODB_RESOURCES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-resources
    DYNAMODB_RESOURCES_GSI_1: GSI_1
    DYNAMODB_RESOURCES_GSI_2: GSI_2
    DYNAMODB_USER_LOOKUP_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users-lookup
    DYNAMODB_TOKEN_LOOKUP_TABLE: ${self:service}-${opt:stage, self:provider.stage}-tokens-lookup
    SES_SOURCE_ARN: arn:aws:ses:us-west-2:426380452104:identity/rpmed-apps.com
    PDF_RENDER_TOPIC_ARN: ${cf:serverless-puppeteer-service-${opt:stage, self:provider.stage}.RenderTopicExport}
    PDF_RENDER_BUCKET: ${cf:serverless-puppeteer-service-${opt:stage, self:provider.stage}.CachedFilesBucketName}
    PDF_CONFIRMATION_TOPIC_ARN: ${self:custom.confirmRgaGoodPdfSnsTopicArn.${opt:stage, self:provider.stage}}
    SNS_EXECUTE_BACKGROUND_JOB: ${self:custom.backgroundJobTopicTopicArn.${opt:stage, self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: ${cf:serverless-puppeteer-service-${opt:stage, self:provider.stage}.RenderTopicExport}
    - Effect: Allow
      Action:
        - sns:DeleteEndpoint
        - sns:Publish
        - sns:GetPlatformApplicationAttributes
        - sns:CreatePlatformEndpoint
      Resource: 'arn:aws:sns:${opt:region, self:provider.region}:*'
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: 'arn:aws:ses:us-west-2:426380452104:identity/rpmed-apps.com'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHED_IMAGES_BUCKET}/*'
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: 'arn:aws:s3:::${self:provider.environment.PDF_RENDER_BUCKET}/*'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${opt:stage, self:provider.stage}-*'

functions:
  graphql:
    handler: app/apollo.graphqlHandler
    events:
      - http:
          path: graphql
          method: any
          cors: true
  token:
    handler: app/token.createToken
    events:
      - http:
          method: post
          path: auth/token
          cors: true
  forgotPassword:
    handler: app/forgot.sendResetPasswordEmail
    events:
      - http:
          method: post
          path: auth/forgot
          cors: true
  handlePdf:
    handler: app/background.handlePdf
    reservedConcurrency: 10
    timeout: 300
    events:
      - sns: ${self:custom.confirmRgaGoodPdfSnsTopic}
  background:
    handler: app/background.handleJob
    reservedConcurrency: 10
    timeout: 300
    events:
      - sns: ${self:custom.backgroundJobTopic}
  modelsFromSheet:
    handler: app/sheets.importModels
    timeout: 60
  symptomsFromSheet:
    handler: app/sheets.importSymptoms
    timeout: 60
resources:
  # S3
  - ${file(resources/s3-bucket.yml)}
  # DynamoDB
  - ${file(resources/dynamo.yml)}
  # SNS
  - ${file(resources/sns.yml)}
